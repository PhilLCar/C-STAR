;; include (parsing/bnf/expressions.bnf)
;; include (parsing/bnf/types.bnf)
#;; include (parsing/bnf/oop.bnf)
#;; include (parsing/bnf/operator.bnf)

<program> ::= { <statement> }

<statement> ::= <address> <statement> | <special-block> | <block> /*| <class-decl> | <op-assoc>*/ 

<block>       ::= "{" { <statement> } "}" | <line>
<line>        ::= ( <declaration> | <control> | <func-assoc> ) [ ";" ]
<declaration> ::= <type> <raw: variable> ( <prototype> | [ "=" ] <sequence> ) /*| <class-type> | <proto-op>*/
<prototype>   ::= "(" [ <type> [ <raw: variable> ] { "," <type> [ <raw: variable> ] } ] ")"
<control>     ::= "goto" <raw: variable> | ("break" | "continue" | "finish" | "return" | "push") [ <sequence> ] | "pop"

<special-block> ::= <if-block> | <switch-block> | <loop-block>
<do-block>      ::= "do" <statement>
<if-block>      ::= "if" <sequence> <statement> [ "else" <statement> ]
<loop-block>    ::= [ <do-block> ] ( <while-block> | <for-block> | <foreach-block> | <metafor-block> )
<while-block>   ::= "while" <sequence> <statement>
<for-block>     ::= "for" "(" [ [ <type> ] <sequence> ] ";" [ <sequence> ] ";" [ <sequence> ] ")" <statement>
<foreach-block> ::= "for" "each" "(" [ <type> ] <sequence> ( "in" | "of" | "from" ) <sequence> ")" <statement>
<switch-block>  ::= "switch" <sequence> "{" { ( "case" <sequence> | "default" ) ":" { <statement> } } "}"
<metafor-block> ::= [ <do-block> ] "meta" "for" "(" [ <type> ] <sequence> "in" <sequence> ")" <statement>

<address> ::= <raw: variable> ":"