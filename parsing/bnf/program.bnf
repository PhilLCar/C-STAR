;; include (parsing/bnf/expressions.bnf)
;; include (parsing/bnf/types.bnf)
#;; include (parsing/bnf/oop.bnf)
#;; include (parsing/bnf/operator.bnf)

<program> ::= { <statement> }

<statement> ::= <block> | <special-blocks> | <address> <statement> /*| <class-decl> | <operator-assoc>*/ 

<block>       ::= <line> | "{" { <statement> } "}"
<line>        ::= ( <expression> | <declaration> | <control> ) ( ";" | <raw: newline> ) | ";"
<declaration> ::= <type> ( <expression> - <call> | <prototype> )
<prototype>   ::= <raw:variable> "(" [ <type> <raw: variable> { "," <type> <raw: variable> } ] ")"
<control>     ::= "goto" <raw: variable> | "break" [ <sequence> ] | "continue" [ <sequence> ] | "finish" [ <sequence> ]

<special-blocks> ::= <if-block> | <switch-block> | <loop-block>
<do-block>       ::= "do" <statement>
<if-block>       ::= "if" <sequence> [ <raw: newline> ] <statement> [ "else" <statement> ]
<loop-block>     ::= [ <do-block> ] ( <while-block> | <for-block> | <foreach-block> | <metafor-block> )
<while-block>    ::= "while" <sequence> [ <raw: newline> ] <statement>
<for-block>      ::= "for" "(" [ <expression> | <declaration> ] ";" [ <expression> ] ";" [ <expression> ] ")" <statement>
<foreach-block>  ::= "for" "each" "(" <sequence> ( "in" | "of" | "from" ) <sequence> ")" <statement>
<switch-block>   ::= "switch" <sequence> [ <raw: newline> ] "{" { <switch-label> ":" { <statement> } } "}"
<metafor-block> ::= [ <do-block> ] "meta" "for" "(" [ <declaration> ] "in" <sequence> ")" <block>
# var[10, 10, 10] a;
#
# metafor (var x in a) {
# 	// normal access, if you know a's structure
# 	a[x[0], x[1], x[2]] = wtv;
# 	// meta access, if a's structure is unknown
# 	a[meta x] = wtv;
# }

<address>      ::= <raw: variable> ":" <raw: newline>
<switch-label> ::= ( "case" <expression> | "default" ) ":" [ <raw: newline> ]