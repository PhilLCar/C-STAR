<program> ::= { <statement> }

<statement> ::= <line> | <func-assoc> | <special-blocks> | <class-decl>

<line> ::= ( <expression> | <declaration> ) ";"

<expression> ::= <expr> | <const-expr>
<declaration> ::= [ <type> ] <variable> { "," <variable> }

<function-association> ::= <variable> <lambda-expression>
<lambda-expression> ::= [ <parameter-block> ] <block>
<parameter-block> ::= "(" ")" | "(" <parameter> { "," <parameter> } ")"
<parameter> ::= [ <type> ] <declarative-expression>


<block> ::= <line> | "{" { <statement> } "}"

<if-block> ::= "if" <expression> <block> [ "else" <block> ]
<while-block> ::= [ <do-block> ] "while" <expression> <block>
<for-block> ::= [ <do-block> ] "for" "(" [ <expression> ] ";" [ <expression> ] ";" [ <expression> ] ")" <block>
<foreach-block> ::= [ <do-block> ] "foreach" "(" [ <expression> ] "in" <variable> ")" <block>
<metafor-block> ::= [ <do-block> ] "metafor" "(" [ <declaration> ] "in" <variable> ")" <block>
<switch-block> ::= "switch" <expression> {}


