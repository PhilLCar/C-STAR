;; include (parsing/bnf/expressions.bnf)
#;; include (parsing/bnf/oop.bnf)
#;; include (parsing/bnf/operator.bnf)

<program> ::= { <statement> }

<statement> ::= <block> | <func-assoc> | <special-blocks> | <address> //| <class-decl> | <operator-assoc>

<block>       ::= <line> | "{" { <statement> } "}"
<line>        ::= [ <expression> | <declaration> | <control> ] ";"
<declaration> ::= <type> <expression>
<control>     ::= "goto" <raw: variable> | "break" [ <expression> ] | "continue" [ <expression> ] | "finish" [ <expression> ]

<func-assoc>      ::= [ <type> ] <raw: variable> <lambda>
<lambda>          ::= [ <parameter-block> ] <block>
<parameter-block> ::= "(" [ <parameter> { "," <parameter> } ] ")"
<parameter>       ::= [ <type> ] <assignment>

<special-blocks> ::= <if-block> | <while-block> | <for-block> | <foreach-block> | <switch-block> | <metafor-block>
<do-block>      ::= "do" <block>
<if-block>      ::= "if" <expression> <block> [ "else" <block> ]
<while-block>   ::= [ <do-block> ] "while" <expression> <block>
<for-block>     ::= [ <do-block> ] "for" "(" [ <expression> | <declaration> ] ";" [ <expression> ] ";" [ <expression> ] ")" <block>
<foreach-block> ::= [ <do-block> ] "for" "each" "(" [ <expression> ] "in" <expression> ")" <block>
<switch-block>  ::= "switch" <expression> "{" { <switch-label> ":" { <statement> } } "}"

# var[10, 10, 10] a;
#
# metafor (var x in a) {
# 	// normal access, if you know a's structure
# 	a[x[0], x[1], x[2]] = wtv;
# 	// meta access, if a's structure is unknown
# 	a[meta x] = wtv;
# }
<metafor-block> ::= [ <do-block> ] "meta" "for" "(" [ <declaration> ] "in" <variable> ")" <block>

<address>      ::= <raw: variable> ":"
<switch-label> ::= ( "case" <expression> | "default" ) ":"