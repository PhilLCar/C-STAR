;; include (parsing/bnf/expressions.bnf)
;; include (parsing/bnf/types.bnf)
;; include (parsing/bnf/oop.bnf)
;; include (parsing/bnf/operator.bnf)

<program> ::= { <namespace> | <typedef> | <opdef> | [ <template> ] <class> | <statement> }

<statement> ::= ";" | <address> <statement> | <special-block> | <block>

<block>       ::= "{" { <statement> } "}" | <line>
<line>        ::= ( <control> | <declaration> | <func-assoc> ) [ ";" ]
<declaration> ::= <type> ( <raw: variable> | <op-func> ) ( <prototype> | [ "=" ] <func-assoc> )
<prototype>   ::= "(" [ <type> [ <raw: variable> ] { "," <type> [ <raw: variable> ] } ] ")" ! "{"
<control>     ::= "goto" <raw: variable> | ("break" | "continue" | "finish" | "return" ) [ <func-assoc> ]

<template> ::= "template" "<" [ <template-type> { "," <template-type> } ] ">"
<template-type> ::= <new: new-type> [ ":" <type> ]

<special-block> ::= <if-block> | <try-block> | <switch-block> | <loop-block> | <with-block>
<condition>     ::= <sequence> - <lambda>
<do-block>      ::= "do" <statement>
<if-block>      ::= "if" <condition> <statement> [ "else" <statement> ]
<try-block>     ::= "try" <statement> [ ( "catch" | "except" <condition> ) <statement> ]
<loop-block>    ::= [ <do-block> ] ( <while-block> | <for-block> | <foreach-block> | <metafor-block> )
<while-block>   ::= "while" <condition> <statement>
<for-block>     ::= "for" "(" [ [ <type> ] <func-assoc> ] ";" [ <condition> ] ";" [ <func-assoc> ] ")" <statement>
<foreach-block> ::= "for" "(" [ <type> ] <raw: variable> ( "in" | "of" | "from" ) <condition> ")" <statement>
<switch-block>  ::= "switch" <condition> "{" { ( "case" <condition> | "default" ) ":" { <statement> } } "}"
<metafor-block> ::= "meta" "for" "(" [ <type> ] <raw: variable> "in" <condition> ")" <statement>
<with-block>    ::= "with" <full-name> { ","  <full-name> } "{" { <statement> } "}"

<address> ::= <raw: variable> ":"