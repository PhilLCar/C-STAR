<forward: loop-block>
<forward: statement>
<forward: type>

// PRIORITY 19 RL
<func-assoc> ::= <sequence> [ <contiguous> <func-assoc> ]

// PRIORITY 18 LR
<sequence> ::= [ <sequence> "," ] <assignment>

// PRIORITY 17 RL
<assignment> ::= <pairing> [ ( "="    |
                               "+="   |
                               "-="   |
                               "*="   |
                               "/="   |
                               "%="   |
                               "+^="  |
                               "-^="  |
                               "*^="  |
                               "/^="  |
                               "<<<=" |
                               "<<="  |
                               ">>="  |
                               ">>>=" |
                               "|>="  |
                               "<|="  |
                               "&="   |
                               "^="   |
                               "|="   |
                               "~=" ) <assignment> ]

// PRIORITY 16 RL
<pairing> ::= <ternary> [ "::" <pairing> ]

// PRIORITY 15 RL
<ternary> ::= <log-or> [ "?" <ternary> ":" <ternary> ]

// PRIORITY 14 LR
<log-or>  ::= [ <log-or> "||" ] <log-xor>

// PRIORITY 13 LR
<log-xor> ::= [ <log-xor> "^^" ] <log-and>

// PRIORITY 12 LR
<log-and> ::= [ <log-and> "&&" ] <bit-or>

// PRIORITY 11 LR
<bit-or>  ::= [ <bit-or> "|" ] <bit-xor>

// PRIORITY 10 LR
<bit-xor> ::= [ <bit-xor> "^" ] <bit-and>

// PRIORITY 9 LR
<bit-and> ::= [ <bit-and> "&" ] <comparative>

// PRIORITY 8 LR
<comparative> ::= [ <comparative> ( "==" | "===" | "!=" | "!==" ) ] <relational>

// PRIORITY 7 LR
<relational> ::= [ <relational> ( "<" | ">" | "<=" | ">=" ) ] <shift>

// PRIORITY 6 LR
<shift> ::= [ <shift> ( "<<<" | "<<" | ">>" | ">>>" | "|>" | "<|" ) ] <additive>

// PRIORITY 5 LR
<additive> ::= [ <additive> ( "+" | "-" ) ] <multiplicative>

// PRIORITY 4 LR
<multiplicative> ::= [ <multiplicative> ( "*" | "/" | "%" ) ] <power>

// PRIORITY 3 LR
<power> ::= [ <power> ( "*^" | "/^" ) ] <p2>

// PRIORITY 2 RL
<p2> ::= <prefix> | <unary> | <not> | <cast> | <deref> | <ref> | <p1>
<prefix>  ::= ( "++" | "--" | "+^" | "-^" | "<:" | "sizeof" | "typeof" ) <p2>
<unary>   ::= ( "+" | "-" ) <p2>
<not>     ::= ( "!" | "~" ) <p2>
<cast>    ::= "(" <type> ")" <p2>
<deref>   ::= "*" <p2>
<ref>     ::= "&" <p2>

// PRIORITY 1 LR
<p1> ::= <postfix> | <call> | <index> | <access> | <p-access> | <structure> | <value>
<postfix>  ::= <p1> ( "++" | "--" | "!*" | "!/" | "!" | ":>" )
<call>     ::= <p1> "(" [ <sequence> ] ")" ! "{"
<index>    ::= <p1> "[" <sequence> "]"
<access>   ::= <p1> "."  <raw: variable>
<p-access> ::= <p1> "->" <raw: variable>

// STRUCTURES
<structure> ::= <list> | <array> | <lambda> | <parent>
<list>      ::= "[" [ <sequence> | <loop-block> ] "]"
<array>     ::= "{" [ <sequence> | <loop-block> ] "}"
<lambda>    ::= "(" [ <parameter> { "," <parameter> } ] ")" "{" { <statement> } "}"
<parameter> ::= [ <type> ] <raw: variable> [ "=" <sequence> ]
<parent>    ::= "(" <func-assoc> ")"

// BASE VALUE
<value> ::= <raw: variable> | <raw: string> | <raw: integer> | <raw: decimal> | <raw: constant>